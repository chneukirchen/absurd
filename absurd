#!/bin/bash
# absurd - build stuff from AUR, ABS or existing directories
#
# Written by Christian Neukirchen <purl.org/net/chneukirchen>, 13jan2013
# 
# To the extent possible under law, the creator of this work has waived
# all copyright and related or neighboring rights to this work.
# http://creativecommons.org/publicdomain/zero/1.0/

# XXX option to install deps from ABS too?
# XXX store git snapshots of $ABSURDTOP before updating?
# XXX --devel
# XXX --noconfirm to makepkg and pacman

[[ -e ~/.absurd.conf ]] && . ~/.absurd.conf

# XXX move to something more persistent later
: ${ABSURDTOP:=/tmp/absurd-$UID}
: ${ABSURDREPO:=/tmp/absurdrepo-$UID/absurd}
: ${ABSURDREPONAME:=$(basename $ABSURDREPO)}
: ${ABSURDJOBS:=1}

: ${ABSURDMAKEPKG:=-s -c}
[[ $UID = 0 ]] && ABSURDMAKEPKG+=" --asroot"

export ABSURDREPONAME ABSURDTOP ABSURDREPO ABSURDJOBS ABSURDMAKEPKG

pacman -Sl "$ABSURDREPONAME" >/dev/null 2>&1 || cat <<EOF >/dev/stderr
Warning: repository $ABSURDREPONAME unknown to pacman!
Add these lines to /etc/pacman.conf before any other repo:

[$ABSURDREPONAME]
Server = file://$ABSURDREPO

EOF

set -e
mkdir -p "$ABSURDTOP"
mkdir -p "$ABSURDREPO"

cd "$ABSURDTOP"

asroot() {
  if [[ $UID = 0 ]]; then
    eval "$@"
  elif type -p sudo >/dev/null && [[ "$ABSURDSUDO" != no ]]; then
    sudo "$@"
  else
    su root -c "$*"
  fi
}

aur_outdated() {
  URL="https://aur.archlinux.org/rpc.php?type=multiinfo"
  for pkg; do URL="$URL&arg[]=$pkg"; done
  curl -Lkgs $URL | jshon -e results -a -e Name -u -p -e Version -u |
    awk '{ORS=NR%2?" ":"\n";print}' |
    sort | join - <(pacman -Q) |
    while read pkg rver lver; do
      (( $(vercmp $rver $lver) > 0 )) && echo $pkg
    done
}

aur_search() {
  curl -Ls "https://aur.archlinux.org/rpc.php?type=search&arg=$1" |
    jshon -e results -a -e Name -u -p         -e Version -u -p   \
                        -e NumVotes -u -p     -e OutOfDate -u -p \
                        -e Description -u |
    awk 'NR%5==0{printf("%s\n", $0)}
         NR%5==1{printf("aur/%s ", $1)}
         NR%5==2{printf("%s (", $1)}
         NR%5==3{printf("%s) ", $1)}
         NR%5==4{printf("%s\n  ",$1=$1>0?"OOD":"")}' | fmt -p "  "
}

installed() {
  pacman -Sl absurd | awk 'NF==4 {print $2}'
}

fetchaur() {
  pkg=$1
  curl -Lks https://aur.archlinux.org/packages/${pkg:0:2}/$pkg/$pkg.tar.gz |
    tar xzvf - || return 1
  mkdeps $ABSURDTOP/$pkg/PKGBUILD >$pkg/deps.mk
  cat <<EOF >$pkg/update.mk
AUR: $pkg
$pkg:
	absurd --fetchaur $pkg
EOF
}

fetchgit() {
  pkg=$1
  case $(pacman -Spdd --print-format %r $pkg 2>/dev/null || true) in
    core|extra|testing|multilib|multilist-testing)
      git clone --single-branch -b packages/$pkg \
          git://projects.archlinux.org/svntogit/packages.git $pkg;;
    community|community-testing)
      git clone --single-branch -b packages/$pkg \
          git://projects.archlinux.org/svntogit/community.git $pkg;;
    *)
      return 1;;
  esac
  cat <<EOF >$pkg/update.mk
GIT: $pkg
$pkg:
	cd $ABSURDTOP/$pkg && git pull --no-edit
	absurd --mkdeps $ABSURDTOP/$pkg/trunk/PKGBUILD >$ABSURDTOP/$pkg/deps.mk
EOF
  mkdeps $ABSURDTOP/$pkg/trunk/PKGBUILD >$pkg/deps.mk
}

fetch() {
  for pkg; do
    [[ -e $pkg/update.mk ]] && make -f $pkg/update.mk $pkg ||
      fetchaur $pkg ||
      fetchgit $pkg ||
      echo "cannot fetch package $pkg" >/dev/stderr
  done
}

mkdeps() {
  for pkgbuild in "$@"; do
    (
      cd $(dirname $pkgbuild)

      . /etc/makepkg.conf
      . ./PKGBUILD || true

      fullver=${epoch:+$epoch:}$pkgver-$pkgrel
      if [[ "$arch" = any ]]; then
        tgt="$ABSURDREPO/${pkgname}-${fullver}-any${PKGEXT}"
      else
        tgt="$ABSURDREPO/${pkgname}-${fullver}-${CARCH}${PKGEXT}"
      fi

      for d in ${depends[@]} ${makedepends[@]}; do
        echo $d:
      done
      echo ${pkgname%/}: $(stripver ${depends[@]} ${makedepends[@]})
      dir=$ABSURDTOP/$pkgname
      [[ -e $dir/trunk/PKGBUILD ]] && dir=$dir/trunk
      echo "	cd $dir && [ -e $tgt ] || { PKGDEST=\$\$ABSURDREPO makepkg \$\$ABSURDMAKEPKG && repo-add \$\$ABSURDREPO/\$\$ABSURDREPONAME.db.tar.gz *.pkg.*; }"
    )
  done
}

stripver() {
  printf '%s\n' "$@" | sed 's/[<>=].*//'
}

# don't fetch default repos implicitly
checker() {
  comm -23 <(stripver "$@" | sort -u) \
           <(pacman -Sl |
             awk '$1 != ENVIRON["ABSURDREPONAME"] {print $2}' |
             sort -u)
}

mkupdate() {
  echo -e 'all:\nGIT:\ninclude */update.mk' >Makefile.update
  make -B -f Makefile.update -k -j$ABSURDJOBS "$@"
}

update() {
  if $FORCE; then
    AUR_OUTDATED=$(installed)
    mkupdate GIT $(pacman -Qmq) $(pacman -Slq $ABSURDREPONAME)
  else
    AUR_OUTDATED=$(aur_outdated $(pacman -Qmq) $(pacman -Slq $ABSURDREPONAME))
    mkupdate GIT $AUR_OUTDATED
  fi
}

build() {
  echo -e 'all:\ninclude */deps.mk' >Makefile.build
  make -B -f Makefile.build -k -j$ABSURDJOBS "$@"
}

ABSURDIGNORE=()
FORCE=false
while (( $# )); do
  case $1 in
    -f) ABSURDMAKEPKG+=" $1"; FORCE=true; shift;;
    --skipinteg|-A|--ignorearch) ABSURDMAKEPKG+=" $1"; shift;;
    --ignore) shift; ABSURDIGNORE+=(--ignore "$1"); shift;;
    -j*) ABSURDJOBS=${1#-j}; shift;;
    *) break;;
  esac
done

case $1 in
  --help|-h|"")
    cat >/dev/stderr <<EOF
usage:  absurd  -S   PKGS...          install from AUR and repos
        absurd  -Sa  PKGS...          install from AUR and ABS
        absurd  -Sw  PKGS...          build packages from AUR and ABS
        absurd  -Su  PKGS...          rebuild all from AUR and ABS
        absurd  -Sy  PKGS...          update from AUR and ABS
        absurd  -Syu PKGS...          update, rebuild and install all packages
        absurd [-Ss] KEYWORD...       search in AUR and repos

additional options (before -S... only):
        -jN                           run N fetches/builds in parallel
        -f                            force rebuilds
        -A, --ignorearch              ignore architecture checks
        --skipinteg                   no verification checks on source files
        --ignore PKGS                 don't operate on comma-seperated PKGS
EOF
    ;;

  -S)
    shift
    (( $# )) || exit 1
    fromaur=($(checker "$@"))
    (( ${#fromaur[@]} )) && fetch "${fromaur[@]}"
    build ${fromaur[@]}
    asroot pacman -Sy
    asroot pacman "${ABSURDIGNORE[@]}" -S "$@"
    ;;

  -Sa)
    # fork from ABS
    shift
    (( $# )) || exit 1
    fetch "$@"
    build "$@"
    asroot pacman -Sy
    asroot pacman "${ABSURDIGNORE[@]}" -S "$@"
    ;;

  -Sw)
    shift
    (( $# )) || exit 0
    fetch "$@"
    build "$@"
    ;;

  -Syu)
    shift
    asroot pacman "${ABSURDIGNORE[@]}" -Syu "$@"
    fetch "$@"
    update
    build $AUR_OUTDATED "$@"
    asroot pacman "${ABSURDIGNORE[@]}" -Syu "$@"
    ;;

  -Sy)
    shift
    update
    asroot pacman "${ABSURDIGNORE[@]}" -Sy
    ;;

  -Su)
    shift
    asroot pacman "${ABSURDIGNORE[@]}" -Su "$@"
    fetch "$@"
    build $(installed)
    asroot pacman "${ABSURDIGNORE[@]}" -Su "$@"
    ;;

  -Q*)
    pacman "$@";;

  -D*|-R*|-U*)
    asroot pacman "$@";;

  --mkdeps) shift; mkdeps "$@";;
  --fetchaur) shift; fetchaur "$@";;

  -Ss)
    shift ;;&
  *)
    pacman -Ss "$@" || true
    aur_search "$@" || true
    ;;
esac
